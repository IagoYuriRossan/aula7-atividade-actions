name: CI / CD

on:
  push:
    branches: [main]

jobs:
  pipeline:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Instalar dependências
        run: npm install --force      

      - name: Instalar Semver
        run: npm install -g semver       

      - name: Build
        run: npm run build

      - name: Testes
        run: npm test -- --coverage
        
      - name: Criar nova tag caso não exista
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          if [ -z "$(git tag)" ]; then
            git config --global user.name 'github-actions'
            git config --global user.email 'github-actions@github.com'
            git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${REPO}
            git tag -a v0.0.0 -m "Initial release"
            git push origin v0.0.0
          else
            echo "Tag v0.0.0 já existe - nenhuma ação necessária."
          fi

      - name: Calcular nova versão
        id: version
        shell: bash
        run: |
          set -euo pipefail
          git fetch --tags --force --prune

          EXISTING_TAG=$(git tag --points-at HEAD | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1 || true)
          if [ -n "${EXISTING_TAG:-}" ]; then
            VERSION="${EXISTING_TAG#v}"
            {
              echo "should_deploy=false"
              echo "current_version=$VERSION"
              echo "new_version=$VERSION"
            } >> "$GITHUB_OUTPUT"
            echo "NEW_VERSION=$VERSION" >> "$GITHUB_ENV"
            exit 0
          fi

          LAST_TAG=$(git tag --list 'v[0-9]*.[0-9]*.[0-9]*' --sort=-v:refname | head -n1 || true)
          [ -z "${LAST_TAG:-}" ] && LAST_TAG="v0.0.0"
          CURRENT_VERSION="${LAST_TAG#v}"

          LOG_RANGE="${LAST_TAG}..HEAD"
          [ "$LAST_TAG" = "v0.0.0" ] && LOG_RANGE=""

          mapfile -t COMMITS < <(git log ${LOG_RANGE} --pretty=format:'%s' || true)

          MAJOR=0; MINOR=0; PATCH=0
          for COMMIT in "${COMMITS[@]:-}"; do
            if [[ "$COMMIT" == *"BREAKING CHANGE"* ]] || [[ "$COMMIT" =~ ^feat!\: ]] || [[ "$COMMIT" =~ \!$ ]]; then
              MAJOR=1
            elif [[ "$COMMIT" =~ ^feat(\(.+\))?\: ]]; then
              MINOR=1
            elif [[ "$COMMIT" =~ ^fix(\(.+\))?\: ]]; then
              PATCH=1
            fi
          done

          NEW_VERSION="$CURRENT_VERSION"
          [[ $MAJOR -eq 1 ]] && NEW_VERSION=$(semver -i major "$CURRENT_VERSION")
          [[ $MINOR -eq 1 ]] && NEW_VERSION=$(semver -i minor "$CURRENT_VERSION")
          [[ $PATCH -eq 1 ]] && NEW_VERSION=$(semver -i patch "$CURRENT_VERSION")

          if [ "$CURRENT_VERSION" = "$NEW_VERSION" ]; then
            {
              echo "should_deploy=false"
              echo "current_version=$CURRENT_VERSION"
              echo "new_version=$CURRENT_VERSION"
            } >> "$GITHUB_OUTPUT"
            echo "NEW_VERSION=$CURRENT_VERSION" >> "$GITHUB_ENV"
          else
            {
              echo "should_deploy=true"
              echo "current_version=$CURRENT_VERSION"
              echo "new_version=$NEW_VERSION"
            } >> "$GITHUB_OUTPUT"
            echo "NEW_VERSION=$NEW_VERSION" >> "$GITHUB_ENV"
          fi

      - name: Atualizar versão no package.json
        if: steps.version.outputs.should_deploy == 'true' && github.ref == 'refs/heads/main'
        env:
          NEW_VERSION: ${{ steps.version.outputs.new_version }}
        run: |
          set -euo pipefail
          npm version "${NEW_VERSION}" --no-git-tag-version

      - name: Commit e push package/tag
        if: steps.version.outputs.should_deploy == 'true' && github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json
          git commit -m "chore(release): version ${NEW_VERSION}" || echo "Nada para commitar"

          if git rev-parse "v${NEW_VERSION}" >/dev/null 2>&1; then
            echo "Tag v${NEW_VERSION} já existe. Pulando criação de tag."
          else
            git tag "v${NEW_VERSION}"
          fi

          git push origin HEAD:main
          git push origin "v${NEW_VERSION}"

      - name: Enviar email se falhar
        if: failure()
        uses: dawidd6/action-send-mail@v6
        with:
          server_address: smtp.gmail.com
          server_port: 587
          secure: false
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: Falha pipeline Actions
          to: fe.dsm.vot.001@gmail.com
          from: ${{ secrets.EMAIL_USERNAME }}
          body: |
            A execução falhou.
            Repositório: ${{ github.repository }}
            Commit: ${{ github.sha }}
            Workflow: ${{ github.workflow }}
            Job: ${{ github.job }}
            Veja os logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
